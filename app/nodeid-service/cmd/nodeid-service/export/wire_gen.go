// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package exportservices

import (
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/biz/biz"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/conf"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/data/data"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/service/dto"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/service/service"
	"github.com/go-micro-saas/service-kit/server"
	"github.com/go-micro-saas/service-kit/setup"
)

// Injectors from wire.go:

func initServices(launcherManager setuputil.LauncherManager, hs *http.Server, gs *grpc.Server) (*serverutil.Services, func(), error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, nil, err
	}
	serviceConfig := conf.GetServiceConfig()
	nodeIDConfig := dto.ToBoNodeIDConfig(serviceConfig)
	db, err := setuputil.GetPostgresDBConn(launcherManager)
	if err != nil {
		return nil, nil, err
	}
	nodeIdDataRepo := data.NewNodeIdData(logger, db)
	nodeSerialDataRepo := data.NewNodeSerialData(logger, db)
	nodeIdBizRepo := biz.NewNodeIDBiz(logger, nodeIDConfig, nodeIdDataRepo, nodeSerialDataRepo)
	srvNodeIDV1Server := service.NewNodeIDV1Service(logger, nodeIdBizRepo)
	services, cleanup, err := service.RegisterServices(hs, gs, srvNodeIDV1Server)
	if err != nil {
		return nil, nil, err
	}
	return services, func() {
		cleanup()
	}, nil
}
