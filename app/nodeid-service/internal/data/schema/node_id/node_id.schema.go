// Package schemas
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package schemas

import (
	migrationuitl "github.com/ikaiguang/go-srv-kit/data/migration"
	datatypes "gorm.io/datatypes"
	gorm "gorm.io/gorm"
	time "time"
)

var _ = time.Time{}

var _ = datatypes.JSON{}

// NodeIdSchema NodeId
var NodeIdSchema NodeId

// NewNodeId new schema
func NewNodeId() *NodeId {
	return &NodeId{}
}

const (
	TableName = "nid_node_id"

	FieldId               = "id"
	FieldCreatedTime      = "created_time"
	FieldUpdatedTime      = "updated_time"
	FieldUuid             = "uuid"
	FieldInstanceId       = "instance_id"
	FieldInstanceName     = "instance_name"
	FieldInstanceMetadata = "instance_metadata"
	FieldNodeId           = "node_id"
	FieldNodeIdStatus     = "node_id_status"
	FieldExpiredAt        = "expired_at"
)

// NodeId ENGINE InnoDB CHARSET utf8mb4 COMMENT '节点'
type NodeId struct {
	Id               int64          `gorm:"column:id;primaryKey;type:int;autoIncrement;not null;default:;comment:ID" json:"id"`
	CreatedTime      time.Time      `gorm:"column:created_time;type:time;not null;default:current_timestamp();comment:创建时间" json:"created_time"`
	UpdatedTime      time.Time      `gorm:"column:updated_time;type:time;not null;default:current_timestamp();comment:更新时间" json:"updated_time"`
	Uuid             string         `gorm:"column:uuid;unique;type:string;size:36;not null;default:'';comment:UUID" json:"uuid"`
	InstanceId       string         `gorm:"column:instance_id;index;type:string;size:255;not null;default:'';comment:实例ID" json:"instance_id"`
	InstanceName     string         `gorm:"column:instance_name;type:string;size:255;not null;default:'';comment:实例名称" json:"instance_name"`
	InstanceMetadata datatypes.JSON `gorm:"column:instance_metadata;type:json;not null;comment:实例元数据" json:"instance_metadata"`
	NodeId           int64          `gorm:"column:node_id;index;type:int;not null;default:0;comment:节点id" json:"node_id"`
	NodeIdStatus     int32          `gorm:"column:node_id_status;type:int;not null;default:0;comment:节点状态" json:"node_id_status"`
	ExpiredAt        time.Time      `gorm:"column:expired_at;type:time;not null;default:current_timestamp();comment:失效时间" json:"expired_at"`
}

// TableName table name
func (s *NodeId) TableName() string {
	return TableName
}

// CreateTableMigrator create table migrator
func (s *NodeId) CreateTableMigrator(migrator gorm.Migrator) migrationuitl.MigrationInterface {
	return migrationuitl.NewCreateTable(migrator, migrationuitl.Version, s)
}

// DropTableMigrator create table migrator
func (s *NodeId) DropTableMigrator(migrator gorm.Migrator) migrationuitl.MigrationInterface {
	return migrationuitl.NewDropTable(migrator, migrationuitl.Version, s)
}
