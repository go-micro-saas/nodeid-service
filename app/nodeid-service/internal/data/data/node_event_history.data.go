// Package data
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package data

import (
	"bytes"
	context "context"
	"github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/data/po"
	datarepos "github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/data/repo"
	schemas "github.com/go-micro-saas/nodeid-service/app/nodeid-service/internal/data/schema/node_event_history"
	gormpkg "github.com/ikaiguang/go-srv-kit/data/gorm"
	errorpkg "github.com/ikaiguang/go-srv-kit/kratos/error"
	gorm "gorm.io/gorm"
	"strings"
)

// nodeEventHistoryRepo repo
type nodeEventHistoryRepo struct {
	dbConn                 *gorm.DB                 // *gorm.DB
	NodeEventHistorySchema schemas.NodeEventHistory // NodeEventHistory
}

// NewNodeEventHistoryRepo new data repo
func NewNodeEventHistoryRepo(dbConn *gorm.DB) datarepos.NodeEventHistoryRepo {
	return &nodeEventHistoryRepo{
		dbConn: dbConn,
	}
}

// =============== 创建 ===============

// create insert one
func (s *nodeEventHistoryRepo) create(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Create(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Create insert one
func (s *nodeEventHistoryRepo) Create(ctx context.Context, dataModel *po.NodeEventHistory) error {
	return s.create(ctx, s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *nodeEventHistoryRepo) CreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) error {
	return s.create(ctx, dbConn, dataModel)
}

// existCreate exist create
func (s *nodeEventHistoryRepo) existCreate(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	anotherModel = new(po.NodeEventHistory)
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistCreate exist create
func (s *nodeEventHistoryRepo) ExistCreate(ctx context.Context, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.existCreate(ctx, s.dbConn, dataModel)
}

// ExistCreateWithDBConn exist create
func (s *nodeEventHistoryRepo) ExistCreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.existCreate(ctx, dbConn, dataModel)
}

// createInBatches create many
func (s *nodeEventHistoryRepo) createInBatches(ctx context.Context, dbConn *gorm.DB, dataModels []*po.NodeEventHistory, batchSize int) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		CreateInBatches(dataModels, batchSize).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// CreateInBatches create many
func (s *nodeEventHistoryRepo) CreateInBatches(ctx context.Context, dataModels []*po.NodeEventHistory, batchSize int) error {
	return s.createInBatches(ctx, s.dbConn, dataModels, batchSize)
}

// CreateInBatchesWithDBConn create many
func (s *nodeEventHistoryRepo) CreateInBatchesWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.NodeEventHistory, batchSize int) error {
	return s.createInBatches(ctx, dbConn, dataModels, batchSize)
}

// =============== 更新 ===============

// update update
func (s *nodeEventHistoryRepo) update(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		// Where(schemas.FieldId+" = ?", dataModel.Id).
		Save(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		return errorpkg.Wrap(e, err)
	}
	return
}

// Update update
func (s *nodeEventHistoryRepo) Update(ctx context.Context, dataModel *po.NodeEventHistory) error {
	return s.update(ctx, s.dbConn, dataModel)
}

// UpdateWithDBConn update
func (s *nodeEventHistoryRepo) UpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) error {
	return s.update(ctx, dbConn, dataModel)
}

// existUpdate exist update
func (s *nodeEventHistoryRepo) existUpdate(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	anotherModel = new(po.NodeEventHistory)
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Where(schemas.FieldId+" != ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			isNotFound = true
			err = nil
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// ExistUpdate exist update
func (s *nodeEventHistoryRepo) ExistUpdate(ctx context.Context, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.existUpdate(ctx, s.dbConn, dataModel)
}

// ExistUpdateWithDBConn exist update
func (s *nodeEventHistoryRepo) ExistUpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (anotherModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.existUpdate(ctx, dbConn, dataModel)
}

// =============== query one : 查一个 ===============

// queryOneById query one by id
func (s *nodeEventHistoryRepo) queryOneById(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	dataModel = new(po.NodeEventHistory)
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Where(schemas.FieldId+" = ?", id).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// QueryOneById query one by id
func (s *nodeEventHistoryRepo) QueryOneById(ctx context.Context, id interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.queryOneById(ctx, s.dbConn, id)
}

// QueryOneByIdWithDBConn query one by id
func (s *nodeEventHistoryRepo) QueryOneByIdWithDBConn(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.queryOneById(ctx, dbConn, id)
}

// queryOneByConditions query one by conditions
func (s *nodeEventHistoryRepo) queryOneByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	dataModel = new(po.NodeEventHistory)
	dbConn = dbConn.WithContext(ctx).Table(s.NodeEventHistorySchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		First(dataModel).Error
	if err != nil {
		if gormpkg.IsErrRecordNotFound(err) {
			err = nil
			isNotFound = true
		} else {
			e := errorpkg.ErrorInternalServer("")
			err = errorpkg.Wrap(e, err)
		}
		return
	}
	return
}

// QueryOneByConditions query one by conditions
func (s *nodeEventHistoryRepo) QueryOneByConditions(ctx context.Context, conditions map[string]interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, s.dbConn, conditions)
}

// QueryOneByConditionsWithDBConn query one by conditions
func (s *nodeEventHistoryRepo) QueryOneByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *po.NodeEventHistory, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, dbConn, conditions)
}

// =============== query all : 查全部 ===============

// queryAllByConditions query all by conditions
func (s *nodeEventHistoryRepo) queryAllByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModels []*po.NodeEventHistory, err error) {
	dbConn = dbConn.WithContext(ctx).Table(s.NodeEventHistorySchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return dataModels, err
	}
	return
}

// QueryAllByConditions query all by conditions
func (s *nodeEventHistoryRepo) QueryAllByConditions(ctx context.Context, conditions map[string]interface{}) ([]*po.NodeEventHistory, error) {
	return s.queryAllByConditions(ctx, s.dbConn, conditions)
}

// QueryAllByConditionsWithDBConn query all by conditions
func (s *nodeEventHistoryRepo) QueryAllByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) ([]*po.NodeEventHistory, error) {
	return s.queryAllByConditions(ctx, dbConn, conditions)
}

// =============== list : 列表 ===============

// list 列表
func (s *nodeEventHistoryRepo) list(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) (dataModels []*po.NodeEventHistory, recordCount int64, err error) {
	// query where
	dbConn = dbConn.WithContext(ctx).Table(s.NodeEventHistorySchema.TableName())
	dbConn = s.WhereConditions(dbConn, conditions)
	dbConn = gormpkg.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormpkg.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormpkg.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return
	}
	return
}

// List 列表
func (s *nodeEventHistoryRepo) List(ctx context.Context, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.NodeEventHistory, int64, error) {
	return s.list(ctx, s.dbConn, conditions, paginatorArgs)
}

// ListWithDBConn 列表
func (s *nodeEventHistoryRepo) ListWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormpkg.PaginatorArgs) ([]*po.NodeEventHistory, int64, error) {
	return s.list(ctx, dbConn, conditions, paginatorArgs)
}

// =============== delete : 删除 ===============

// delete delete one
func (s *nodeEventHistoryRepo) delete(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Where(schemas.FieldId+" = ?", dataModel.Id).
		Delete(dataModel).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// Delete delete one
func (s *nodeEventHistoryRepo) Delete(ctx context.Context, dataModel *po.NodeEventHistory) error {
	return s.delete(ctx, s.dbConn, dataModel)
}

// DeleteWithDBConn delete one
func (s *nodeEventHistoryRepo) DeleteWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *po.NodeEventHistory) error {
	return s.delete(ctx, dbConn, dataModel)
}

// deleteByIds delete by ids
func (s *nodeEventHistoryRepo) deleteByIds(ctx context.Context, dbConn *gorm.DB, ids interface{}) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.NodeEventHistorySchema.TableName()).
		Where(schemas.FieldId+" in (?)", ids).
		Delete(po.NodeEventHistory{}).Error
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return
}

// DeleteByIds delete by ids
func (s *nodeEventHistoryRepo) DeleteByIds(ctx context.Context, ids interface{}) error {
	return s.deleteByIds(ctx, s.dbConn, ids)
}

// DeleteByIdsWithDBConn delete by ids
func (s *nodeEventHistoryRepo) DeleteByIdsWithDBConn(ctx context.Context, dbConn *gorm.DB, ids interface{}) error {
	return s.deleteByIds(ctx, dbConn, ids)
}

// =============== insert : 批量入库 ===============

var _ gormpkg.BatchInsertRepo = new(NodeEventHistorySlice)

// NodeEventHistorySlice 表切片
type NodeEventHistorySlice []*po.NodeEventHistory

// TableName 表名
func (s *NodeEventHistorySlice) TableName() string {
	return schemas.NodeEventHistorySchema.TableName()
}

// Len 长度
func (s *NodeEventHistorySlice) Len() int {
	return len(*s)
}

// InsertColumns 批量入库的列
func (s *NodeEventHistorySlice) InsertColumns() (columnList []string, placeholder string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime, schemas.FieldUpdatedTime,
		schemas.FieldEventName, schemas.FieldEventStatus,
		schemas.FieldEventContent, schemas.FieldEventError,
		schemas.FieldRetryEventTime, schemas.FieldRetryEventCounter,
		schemas.FieldRetryEventResult,
	}

	// placeholders
	insertPlaceholderBytes := bytes.Repeat([]byte("?, "), len(columnList))
	insertPlaceholderBytes = bytes.TrimSuffix(insertPlaceholderBytes, []byte(", "))

	return columnList, string(insertPlaceholderBytes)
}

// InsertValues 批量入库的值
func (s *NodeEventHistorySlice) InsertValues(args *gormpkg.BatchInsertValueArgs) (prepareData []interface{}, placeholderSlice []string) {
	dataModels := (*s)[args.StepStart:args.StepEnd]
	for index := range dataModels {
		// placeholder
		placeholderSlice = append(placeholderSlice, "("+args.InsertPlaceholder+")")

		// prepare data
		prepareData = append(prepareData, dataModels[index].CreatedTime)
		prepareData = append(prepareData, dataModels[index].UpdatedTime)
		prepareData = append(prepareData, dataModels[index].EventName)
		prepareData = append(prepareData, dataModels[index].EventStatus)
		prepareData = append(prepareData, dataModels[index].EventContent)
		prepareData = append(prepareData, dataModels[index].EventError)
		prepareData = append(prepareData, dataModels[index].RetryEventTime)
		prepareData = append(prepareData, dataModels[index].RetryEventCounter)
		prepareData = append(prepareData, dataModels[index].RetryEventResult)
	}
	return prepareData, placeholderSlice
}

// UpdateColumns 批量入库的列
func (s *NodeEventHistorySlice) UpdateColumns() (columnList []string) {
	// columns
	columnList = []string{
		schemas.FieldCreatedTime + "=excluded." + schemas.FieldCreatedTime,
		schemas.FieldUpdatedTime + "=excluded." + schemas.FieldUpdatedTime,
		schemas.FieldEventName + "=excluded." + schemas.FieldEventName,
		schemas.FieldEventStatus + "=excluded." + schemas.FieldEventStatus,
		schemas.FieldEventContent + "=excluded." + schemas.FieldEventContent,
		schemas.FieldEventError + "=excluded." + schemas.FieldEventError,
		schemas.FieldRetryEventTime + "=excluded." + schemas.FieldRetryEventTime,
		schemas.FieldRetryEventCounter + "=excluded." + schemas.FieldRetryEventCounter,
		schemas.FieldRetryEventResult + "=excluded." + schemas.FieldRetryEventResult,
	}
	return columnList
}

// ConflictActionForMySQL 更新冲突时的操作
func (s *NodeEventHistorySlice) ConflictActionForMySQL() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "AS excluded",
		OnConflictTarget:      "ON DUPLICATE KEY",
		OnConflictAction:      "UPDATE " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// ConflictActionForPostgres 更新冲突时的操作
func (s *NodeEventHistorySlice) ConflictActionForPostgres() (req *gormpkg.BatchInsertConflictActionReq) {
	req = &gormpkg.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "",
		OnConflictTarget:      "ON CONFLICT(id)",
		OnConflictAction:      "DO UPDATE SET " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// insert 批量插入
func (s *nodeEventHistoryRepo) insert(ctx context.Context, dbConn *gorm.DB, dataModels NodeEventHistorySlice) error {
	err := gormpkg.BatchInsertWithContext(ctx, dbConn, &dataModels)
	if err != nil {
		e := errorpkg.ErrorInternalServer("")
		err = errorpkg.Wrap(e, err)
		return err
	}
	return nil
}

// Insert 批量插入
func (s *nodeEventHistoryRepo) Insert(ctx context.Context, dataModels []*po.NodeEventHistory) error {
	return s.insert(ctx, s.dbConn, dataModels)
}

// InsertWithDBConn 批量插入
func (s *nodeEventHistoryRepo) InsertWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*po.NodeEventHistory) error {
	return s.insert(ctx, dbConn, dataModels)
}

// =============== conditions : 条件 ===============

// WhereConditions orm where
func (s *nodeEventHistoryRepo) WhereConditions(dbConn *gorm.DB, conditions map[string]interface{}) *gorm.DB {

	// table name
	// tableName := s.NodeEventHistorySchema.TableName()

	// On-demand loading

	// id
	// if data, ok := conditions[schemas.FieldId]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldId+" = ?", data)
	// }

	// created_time
	// if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldCreatedTime+" = ?", data)
	// }

	// updated_time
	// if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldUpdatedTime+" = ?", data)
	// }

	// event_name
	// if data, ok := conditions[schemas.FieldEventName]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldEventName+" = ?", data)
	// }

	// event_status
	// if data, ok := conditions[schemas.FieldEventStatus]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldEventStatus+" = ?", data)
	// }

	// event_content
	// if data, ok := conditions[schemas.FieldEventContent]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldEventContent+" = ?", data)
	// }

	// event_error
	// if data, ok := conditions[schemas.FieldEventError]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldEventError+" = ?", data)
	// }

	// retry_event_time
	// if data, ok := conditions[schemas.FieldRetryEventTime]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldRetryEventTime+" = ?", data)
	// }

	// retry_event_counter
	// if data, ok := conditions[schemas.FieldRetryEventCounter]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldRetryEventCounter+" = ?", data)
	// }

	// retry_event_result
	// if data, ok := conditions[schemas.FieldRetryEventResult]; ok {
	// 	   dbConn = dbConn.Where(tableName+"."+schemas.FieldRetryEventResult+" = ?", data)
	// }

	return dbConn
}

// UpdateColumns update columns
func (s *nodeEventHistoryRepo) UpdateColumns(conditions map[string]interface{}) map[string]interface{} {

	// update columns
	updateColumns := make(map[string]interface{})

	// On-demand loading

	// id
	//if data, ok := conditions[schemas.FieldId]; ok {
	//	updateColumns[schemas.FieldId] = data
	//}

	// created_time
	//if data, ok := conditions[schemas.FieldCreatedTime]; ok {
	//	updateColumns[schemas.FieldCreatedTime] = data
	//}

	// updated_time
	//if data, ok := conditions[schemas.FieldUpdatedTime]; ok {
	//	updateColumns[schemas.FieldUpdatedTime] = data
	//}

	// event_name
	//if data, ok := conditions[schemas.FieldEventName]; ok {
	//	updateColumns[schemas.FieldEventName] = data
	//}

	// event_status
	//if data, ok := conditions[schemas.FieldEventStatus]; ok {
	//	updateColumns[schemas.FieldEventStatus] = data
	//}

	// event_content
	//if data, ok := conditions[schemas.FieldEventContent]; ok {
	//	updateColumns[schemas.FieldEventContent] = data
	//}

	// event_error
	//if data, ok := conditions[schemas.FieldEventError]; ok {
	//	updateColumns[schemas.FieldEventError] = data
	//}

	// retry_event_time
	//if data, ok := conditions[schemas.FieldRetryEventTime]; ok {
	//	updateColumns[schemas.FieldRetryEventTime] = data
	//}

	// retry_event_counter
	//if data, ok := conditions[schemas.FieldRetryEventCounter]; ok {
	//	updateColumns[schemas.FieldRetryEventCounter] = data
	//}

	// retry_event_result
	//if data, ok := conditions[schemas.FieldRetryEventResult]; ok {
	//	updateColumns[schemas.FieldRetryEventResult] = data
	//}

	return updateColumns
}
