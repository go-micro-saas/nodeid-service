// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/nodeid-service/v1/services/node_event.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/nodeid-service/api/nodeid-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvNodeEventV1_Ping_FullMethodName                        = "/saas.api.nodeid.servicev1.SrvNodeEventV1/Ping"
	SrvNodeEventV1_SubscribeRenewalNodeIdEvent_FullMethodName = "/saas.api.nodeid.servicev1.SrvNodeEventV1/SubscribeRenewalNodeIdEvent"
	SrvNodeEventV1_StopRenewalNodeIdEvent_FullMethodName      = "/saas.api.nodeid.servicev1.SrvNodeEventV1/StopRenewalNodeIdEvent"
)

// SrvNodeEventV1Client is the client API for SrvNodeEventV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvNodeEventV1 service
type SrvNodeEventV1Client interface {
	// ping
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	// 节点ID - 订阅续订节点id事件
	SubscribeRenewalNodeIdEvent(ctx context.Context, in *resources.SubscribeRenewalNodeIdEventReq, opts ...grpc.CallOption) (*resources.SubscribeRenewalNodeIdEventResp, error)
	// 节点ID - 停止续订节点id事件
	StopRenewalNodeIdEvent(ctx context.Context, in *resources.StopRenewalNodeIdEventReq, opts ...grpc.CallOption) (*resources.StopRenewalNodeIdEventResp, error)
}

type srvNodeEventV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvNodeEventV1Client(cc grpc.ClientConnInterface) SrvNodeEventV1Client {
	return &srvNodeEventV1Client{cc}
}

func (c *srvNodeEventV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvNodeEventV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvNodeEventV1Client) SubscribeRenewalNodeIdEvent(ctx context.Context, in *resources.SubscribeRenewalNodeIdEventReq, opts ...grpc.CallOption) (*resources.SubscribeRenewalNodeIdEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SubscribeRenewalNodeIdEventResp)
	err := c.cc.Invoke(ctx, SrvNodeEventV1_SubscribeRenewalNodeIdEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvNodeEventV1Client) StopRenewalNodeIdEvent(ctx context.Context, in *resources.StopRenewalNodeIdEventReq, opts ...grpc.CallOption) (*resources.StopRenewalNodeIdEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.StopRenewalNodeIdEventResp)
	err := c.cc.Invoke(ctx, SrvNodeEventV1_StopRenewalNodeIdEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvNodeEventV1Server is the server API for SrvNodeEventV1 service.
// All implementations must embed UnimplementedSrvNodeEventV1Server
// for forward compatibility.
//
// SrvNodeEventV1 service
type SrvNodeEventV1Server interface {
	// ping
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// 节点ID - 订阅续订节点id事件
	SubscribeRenewalNodeIdEvent(context.Context, *resources.SubscribeRenewalNodeIdEventReq) (*resources.SubscribeRenewalNodeIdEventResp, error)
	// 节点ID - 停止续订节点id事件
	StopRenewalNodeIdEvent(context.Context, *resources.StopRenewalNodeIdEventReq) (*resources.StopRenewalNodeIdEventResp, error)
	mustEmbedUnimplementedSrvNodeEventV1Server()
}

// UnimplementedSrvNodeEventV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvNodeEventV1Server struct{}

func (UnimplementedSrvNodeEventV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvNodeEventV1Server) SubscribeRenewalNodeIdEvent(context.Context, *resources.SubscribeRenewalNodeIdEventReq) (*resources.SubscribeRenewalNodeIdEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeRenewalNodeIdEvent not implemented")
}
func (UnimplementedSrvNodeEventV1Server) StopRenewalNodeIdEvent(context.Context, *resources.StopRenewalNodeIdEventReq) (*resources.StopRenewalNodeIdEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRenewalNodeIdEvent not implemented")
}
func (UnimplementedSrvNodeEventV1Server) mustEmbedUnimplementedSrvNodeEventV1Server() {}
func (UnimplementedSrvNodeEventV1Server) testEmbeddedByValue()                        {}

// UnsafeSrvNodeEventV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvNodeEventV1Server will
// result in compilation errors.
type UnsafeSrvNodeEventV1Server interface {
	mustEmbedUnimplementedSrvNodeEventV1Server()
}

func RegisterSrvNodeEventV1Server(s grpc.ServiceRegistrar, srv SrvNodeEventV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvNodeEventV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvNodeEventV1_ServiceDesc, srv)
}

func _SrvNodeEventV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvNodeEventV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvNodeEventV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvNodeEventV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvNodeEventV1_SubscribeRenewalNodeIdEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SubscribeRenewalNodeIdEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvNodeEventV1Server).SubscribeRenewalNodeIdEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvNodeEventV1_SubscribeRenewalNodeIdEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvNodeEventV1Server).SubscribeRenewalNodeIdEvent(ctx, req.(*resources.SubscribeRenewalNodeIdEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvNodeEventV1_StopRenewalNodeIdEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.StopRenewalNodeIdEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvNodeEventV1Server).StopRenewalNodeIdEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvNodeEventV1_StopRenewalNodeIdEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvNodeEventV1Server).StopRenewalNodeIdEvent(ctx, req.(*resources.StopRenewalNodeIdEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvNodeEventV1_ServiceDesc is the grpc.ServiceDesc for SrvNodeEventV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvNodeEventV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.nodeid.servicev1.SrvNodeEventV1",
	HandlerType: (*SrvNodeEventV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvNodeEventV1_Ping_Handler,
		},
		{
			MethodName: "SubscribeRenewalNodeIdEvent",
			Handler:    _SrvNodeEventV1_SubscribeRenewalNodeIdEvent_Handler,
		},
		{
			MethodName: "StopRenewalNodeIdEvent",
			Handler:    _SrvNodeEventV1_StopRenewalNodeIdEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nodeid-service/v1/services/node_event.service.v1.proto",
}
